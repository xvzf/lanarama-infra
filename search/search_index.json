{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lanarama Infrastructure & Server Setup Basic network topology The network topology sort of follows the spine-leaf concept. There are two switches for backbone routing and several access switches which connect to both of the backbone (further called core) switches. Infrastructure Edge Router / Firewall (WAN transfer net, BGP internal) KVM host which contains VMs running infrastructure and monitoring services (attached via BGP) Gameserver (tbd) Infrastructure Services & Monitoring DHCP Server (isc-dhcp-server) DNS Server (probably CoreDNS) tbd Prometheus for stats monitoring Elasticsearch for traffic monitoring/analysis","title":"About"},{"location":"#lanarama-infrastructure-server-setup","text":"","title":"Lanarama Infrastructure &amp; Server Setup"},{"location":"#basic-network-topology","text":"The network topology sort of follows the spine-leaf concept. There are two switches for backbone routing and several access switches which connect to both of the backbone (further called core) switches.","title":"Basic network topology"},{"location":"#infrastructure","text":"Edge Router / Firewall (WAN transfer net, BGP internal) KVM host which contains VMs running infrastructure and monitoring services (attached via BGP) Gameserver (tbd)","title":"Infrastructure"},{"location":"#infrastructure-services-monitoring","text":"DHCP Server (isc-dhcp-server) DNS Server (probably CoreDNS) tbd Prometheus for stats monitoring Elasticsearch for traffic monitoring/analysis","title":"Infrastructure Services &amp; Monitoring"},{"location":"fail/","text":"Fails (read this) DHCP has to run on a fucking physical interface and not a bridge . Don't add any kernel routes (e.g. with iproute 2) on the arista switches. It will break routing!","title":"Read this first"},{"location":"fail/#fails-read-this","text":"DHCP has to run on a fucking physical interface and not a bridge . Don't add any kernel routes (e.g. with iproute 2) on the arista switches. It will break routing!","title":"Fails (read this)"},{"location":"monitoring/","text":"Monitoring We are using Prometheus for monitoring the complete infrastructure. Currently, everything is hosted at vm03 running as guest on kvm0 General settings The prometheus configuration is auto-generated and can uses an update interval of 10s. Server/VM monitoring Every server and vm has an instance of node_exporter running. Access Switch monitoring Access switches provide basic port statistics and are scraped using the smtp_exporter . Core Switch monitoring Both core switches are also monitored via snmp. Additionally there is flow monitoring in place with the help of elastifloew . Flow monitoring In order to setup the elastiflow monitoring, the json containing the dashboard template & index patterns has to be uploaded via the Kibana web interface. The json file is placed in /assets/elastifeed","title":"Monitoring"},{"location":"monitoring/#monitoring","text":"We are using Prometheus for monitoring the complete infrastructure. Currently, everything is hosted at vm03 running as guest on kvm0","title":"Monitoring"},{"location":"monitoring/#general-settings","text":"The prometheus configuration is auto-generated and can uses an update interval of 10s.","title":"General settings"},{"location":"monitoring/#servervm-monitoring","text":"Every server and vm has an instance of node_exporter running.","title":"Server/VM monitoring"},{"location":"monitoring/#access-switch-monitoring","text":"Access switches provide basic port statistics and are scraped using the smtp_exporter .","title":"Access Switch monitoring"},{"location":"monitoring/#core-switch-monitoring","text":"Both core switches are also monitored via snmp. Additionally there is flow monitoring in place with the help of elastifloew .","title":"Core Switch monitoring"},{"location":"monitoring/#flow-monitoring","text":"In order to setup the elastiflow monitoring, the json containing the dashboard template & index patterns has to be uploaded via the Kibana web interface. The json file is placed in /assets/elastifeed","title":"Flow monitoring"},{"location":"network_bootstrap/","text":"Network Bootstrap The network configuration is fully automated and based on ansible . Provisioning core switches Currently there is only support for updating the config of the already reachable core switches. This will be adapted as soon as we have more than two backbone switches. Admins are lazy :-P Provisioning access switches Each access switch has to have the default cumulus linux login credentials configured. Additionally it has the IP address assigned to eth0 (the management interface) as stated in the provisioning inventory. Provisioning can be done by executing ansible-playbook -i inventory_provisioning access.yaml","title":"Network Bootstrap"},{"location":"network_bootstrap/#network-bootstrap","text":"The network configuration is fully automated and based on ansible .","title":"Network Bootstrap"},{"location":"network_bootstrap/#provisioning-core-switches","text":"Currently there is only support for updating the config of the already reachable core switches. This will be adapted as soon as we have more than two backbone switches. Admins are lazy :-P","title":"Provisioning core switches"},{"location":"network_bootstrap/#provisioning-access-switches","text":"Each access switch has to have the default cumulus linux login credentials configured. Additionally it has the IP address assigned to eth0 (the management interface) as stated in the provisioning inventory. Provisioning can be done by executing ansible-playbook -i inventory_provisioning access.yaml","title":"Provisioning access switches"},{"location":"network_connectivity/","text":"Network Connectivity Each access switch gets its own (private) IPv4 and (public) IPv6 subnet. NOTE IPv6 prefixes are added here as soon as we know what exactly we'll get! Access IPv4 Each access switch gets its own IPv4 subnet following this schema: 192.168.<access-id>.0/24 The .1 in the network is always the switch and will act as gateway for connecting clients IPv6 tbd IP address configuration For IPv6 we are using SLAAC - the IPv4 part is covered by a DHCP server running on kvm0 to which the access switches connect as a dhcp-relay. Servers heaven0 heaven0 is currently the only edge router. It NATs IPv4 and forwards IPv6 traffic. Additionally it does connection tracking in order to implement some basic network security for the gamers. There is no traffic shaping in place yet as we get a 10 Gigabit uplink connection which we probably will not saturate. kvm0 kvm0 is a virtual-machine host providing several instances like the DHCP server or monitoring. It advertises 192.168.122.0/24","title":"Connectivity"},{"location":"network_connectivity/#network-connectivity","text":"Each access switch gets its own (private) IPv4 and (public) IPv6 subnet. NOTE IPv6 prefixes are added here as soon as we know what exactly we'll get!","title":"Network Connectivity"},{"location":"network_connectivity/#access","text":"","title":"Access"},{"location":"network_connectivity/#ipv4","text":"Each access switch gets its own IPv4 subnet following this schema: 192.168.<access-id>.0/24 The .1 in the network is always the switch and will act as gateway for connecting clients","title":"IPv4"},{"location":"network_connectivity/#ipv6","text":"tbd","title":"IPv6"},{"location":"network_connectivity/#ip-address-configuration","text":"For IPv6 we are using SLAAC - the IPv4 part is covered by a DHCP server running on kvm0 to which the access switches connect as a dhcp-relay.","title":"IP address configuration"},{"location":"network_connectivity/#servers","text":"","title":"Servers"},{"location":"network_connectivity/#heaven0","text":"heaven0 is currently the only edge router. It NATs IPv4 and forwards IPv6 traffic. Additionally it does connection tracking in order to implement some basic network security for the gamers. There is no traffic shaping in place yet as we get a 10 Gigabit uplink connection which we probably will not saturate.","title":"heaven0"},{"location":"network_connectivity/#kvm0","text":"kvm0 is a virtual-machine host providing several instances like the DHCP server or monitoring. It advertises 192.168.122.0/24","title":"kvm0"},{"location":"network_debugging/","text":"Helpful tools/commands FRR NOTE The CLI is similar to Quagga. We are using frrouting as a routing daemon on linux systems (more specific, advertising internal subnets via BGP). Frr is also configuring IP addresses of the interfaces. Privileged users can enter the configuration shell (similar to cisco) with: sudo vtysh Viewing installed routes with vtysh NOTE ip can be replaced with ipv6 All installed routes heaven0# show ip route Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, D - SHARP, F - PBR, > - selected route, * - FIB route K>* 0.0.0.0/0 [0/0] via 172.16.0.1, eno1, 00:23:06 C>* 10.51.1.0/30 is directly connected, enp8s0f1, 00:23:17 S>* 10.52.1.2/32 [1/0] via 10.51.1.1, enp8s0f1, 00:23:17 C>* 10.64.50.1/32 is directly connected, lo, 00:23:17 B>* 10.64.66.6/32 [20/0] via 10.51.1.1, enp8s0f1, 00:23:16 B>* 10.64.66.7/32 [20/0] via 10.151.1.1, enp8s0f0, 00:23:16 B>* 10.64.70.1/32 [20/0] via 10.51.1.1, enp8s0f1, 00:22:03 * via 10.151.1.1, enp8s0f0, 00:22:03 C>* 10.151.1.0/30 is directly connected, enp8s0f0, 00:23:17 S>* 10.152.1.2/32 [1/0] via 10.151.1.1, enp8s0f0, 00:23:17 C>* 172.16.0.0/24 is directly connected, eno1, 00:23:06 B>* 192.168.1.0/24 [20/0] via 10.51.1.1, enp8s0f1, 00:22:03 * via 10.151.1.1, enp8s0f0, 00:22:03 BGP routes (note the Path, this is very useful to trace packets) heaven0# show ip bgp BGP table version is 17, local router ID is 10.64.50.1, vrf id 0 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 0.0.0.0 0 32768 i *> 10.64.50.1/32 0.0.0.0 0 32768 i *> 10.64.66.6/32 10.51.1.1 0 64666 i * 10.151.1.1 0 64667 64666 i *> 10.64.66.7/32 10.151.1.1 0 64667 i *= 10.64.70.1/32 10.151.1.1 0 64667 64701 i *> 10.51.1.1 0 64666 64701 i *= 192.168.1.0/24 10.151.1.1 0 64667 64701 i *> 10.51.1.1 0 64666 64701 i Displayed 6 routes and 9 total paths Core switches The CLI is pretty similiar though not as powerful as FRR or Quagga Routes Installed routes: core0#show ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, DH - DHCP client installed default route, M - Martian, DP - Dynamic Policy Route Gateway of last resort: B E 0.0.0.0/0 [200/0] via 10.51.1.2, Ethernet51/1 C 10.0.1.0/30 is directly connected, Ethernet1 C 10.51.1.0/30 is directly connected, Ethernet51/1 C 10.52.1.0/30 is directly connected, Ethernet51/2 B E 10.64.50.1/32 [200/0] via 10.51.1.2, Ethernet51/1 C 10.64.66.6/32 is directly connected, Loopback1 B E 10.64.66.7/32 [200/0] via 10.0.1.2, Ethernet1 via 10.51.1.2, Ethernet51/1 via 10.52.1.2, Ethernet51/2 B E 10.64.70.1/32 [200/0] via 10.0.1.2, Ethernet1 B E 10.64.80.1/32 [200/0] via 10.52.1.2, Ethernet51/2 C 10.66.6.0/30 is directly connected, Port-Channel666 B E 192.168.1.0/24 [200/0] via 10.0.1.2, Ethernet1 B E 192.168.122.0/24 [200/0] via 10.52.1.2, Ethernet51/2 BGP routes: core0#show ip bgp BGP routing table information for VRF default Router identifier 10.66.6.1, local AS number 64666 Route status codes: s - suppressed, * - valid, > - active, # - not installed, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast Origin codes: i - IGP, e - EGP, ? - incomplete AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric LocPref Weight Path * > 0.0.0.0/0 10.51.1.2 0 100 0 65001 i * > 10.64.50.1/32 10.51.1.2 0 100 0 65001 i * > 10.64.66.6/32 - 0 0 - i * >Ec 10.64.66.7/32 10.51.1.2 0 100 0 65001 64667 i * ec 10.64.66.7/32 10.0.1.2 0 100 0 64701 64667 i * ec 10.64.66.7/32 10.52.1.2 0 100 0 64801 64667 i * > 10.64.70.1/32 10.0.1.2 0 100 0 64701 i * > 10.64.80.1/32 10.52.1.2 0 100 0 64801 i * > 192.168.1.0/24 10.0.1.2 0 100 0 64701 i * > 192.168.122.0/24 10.52.1.2 0 100 0 64801 i Interface status core0#show interfaces status Port Name Status Vlan Duplex Speed Type Flags Encapsulation Et1 connected routed full 10G 10GBASE-LR Et2 notconnect routed full 10G 10GBASE-LR Et3 notconnect routed full 10G 10GBASE-LR Et4 notconnect routed full 10G 10GBASE-LR Et5 notconnect routed full 10G 10GBASE-LR Et6 notconnect routed full 10G 10GBASE-LR Et7 notconnect routed full 10G 10GBASE-LR Et8 notconnect routed full 10G Not Present Et9 disabled 1 full 10G Not Present Et10 disabled 1 full 10G Not Present ... Temperature / Fan speed / Power usage core0#show environment all System temperature status is: Ok Alert Critical Temp Setpoint Limit Limit Sensor Description (C) (C) (C) (C) ------- ----------------------------------- ------- ----------- ------ --------- 1 Cpu temp sensor 43.1 (60) N/A 90 95 2 Cpu board temp sensor 33.0 (55) N/A 75 80 3 Back-panel temp sensor 31.5 (50) N/A 75 85 4 Board sensor 33.0 (N/A) N/A 55 70 5 Front-panel temp sensor 28.4 (N/A) N/A 65 75 6 Trident Bottom Right Outer 44.4 (N/A) N/A 100 110 7 Trident Bottom Left Outer 42.8 (N/A) N/A 100 110 8 Trident Top Left Outer 45.0 (N/A) N/A 100 110 9 Trident Top Right Outer 44.4 (N/A) N/A 100 110 10 Trident Bottom Right Inner 42.8 (N/A) N/A 100 110 11 Trident Bottom Left Inner 43.3 (N/A) N/A 100 110 12 Trident Top Left Inner 42.8 (N/A) N/A 100 110 13 Trident Top Right Inner 42.8 (N/A) N/A 100 110 PowerSupply 1: Alert Critical Temp Setpoint Limit Limit Sensor Description (C) (C) (C) (C) ------- ----------------------------------- ------- ----------- ------ --------- 1 Hotspot temperature sensor 0.0 (80) N/A 95 100 2 Inlet temperature sensor 0.0 (55) N/A 70 75 PowerSupply 2: Alert Critical Temp Setpoint Limit Limit Sensor Description (C) (C) (C) (C) ------- ----------------------------------- ------- ----------- ------ --------- 1 Hotspot temperature sensor 31.0 (80) N/A 95 100 2 Inlet temperature sensor 36.0 (55) N/A 70 75 System cooling status is: Ok Ambient temperature: 31C Fan speed override mode enabled at 30% Airflow: port-side exhaust Config Actual Speed Stable Fan Status Speed Speed Uptime Stability Uptime -------------- ------ ------ ------ ------- --------- ------- 1/1 Ok 30% 29% 0:34:40 Stable 0:33:54 2/1 Ok 30% 30% 0:34:40 Stable 0:33:54 3/1 Ok 30% 29% 0:34:40 Stable 0:33:56 4/1 Ok 30% 30% 0:34:40 Stable 0:33:56 PowerSupply1/1 Ok 30% 34% 0:34:27 Stable 0:32:04 PowerSupply2/1 Ok 30% 34% 0:34:28 Stable 0:32:05 Power Input Output Output Supply Model Capacity Current Current Power Status Uptime ------ ----------- -------- ------- ------- ------ ---------- ------- 1 PWR-500AC-R 500W 0.00A 0.00A 0.0W Power Loss Offline 2 PWR-500AC-R 500W 0.39A 6.47A 77.8W Ok 0:34:28 Total -- 500W -- -- 77.8W -- -- ASIC Resource usage core0#show hardware capacity Forwarding Resources Usage Table Feature Chip Used Used Free Committed Best Case High Entries (%) Entries Entries Max Watermark Entries ------------- ------------- --------------- ------------ --------- ------------ -------------- -------------- --------- EFP Linecard0/0 0 0% 1024 0 1024 0 EFP Slice-0 Linecard0/0 0 0% 256 0 256 0 EFP Slice-1 Linecard0/0 0 0% 256 0 256 0 EFP Slice-2 Linecard0/0 0 0% 256 0 256 0 EFP Slice-3 Linecard0/0 0 0% 256 0 256 0 Host 40 0% 147415 0 147455 40 Host Multicast 0 0% 147415 0 147455 0 Host V4Hosts 22 0% 147415 0 147455 22 Host V6Hosts 18 0% 147415 0 147455 18 IFP Linecard0/0 296 7% 3800 0 4096 296 IFP Slice-0 Linecard0/0 0 0% 512 0 512 0 IFP Slice-1 Linecard0/0 0 0% 512 0 512 0 IFP Slice-10 Linecard0/0 0 0% 256 0 256 0 IFP Slice-11 Linecard0/0 0 0% 256 0 256 0 IFP Slice-2 Linecard0/0 0 0% 512 0 512 0 IFP Slice-3 Linecard0/0 0 0% 512 0 512 0 IFP Slice-4 Linecard0/0 47 18% 209 0 256 47 IFP Slice-5 Linecard0/0 47 18% 209 0 256 47 IFP Slice-6 Linecard0/0 101 39% 155 0 256 101 IFP Slice-7 Linecard0/0 101 39% 155 0 256 101 IFP Slice-8 Linecard0/0 0 0% 256 0 256 0 IFP Slice-9 Linecard0/0 0 0% 256 0 256 0 LPM 17 0% 8173 0 8190 17 LPM V4Routes 5 0% 8173 0 8190 5 LPM V6Routes 12 0% 8173 0 8190 12 LagGroup LAG 1 0% 1023 0 1024 1 LagMember LAG 9 0% 2039 0 2048 9 MAC Linecard0/0 16 0% 163824 0 163840 16 MAC L2 Linecard0/0 16 0% 163824 0 163840 16 NextHop 39 0% 49112 0 49151 39 NextHop Multicast 0 0% 49112 0 49151 0 NextHop Unicast 39 0% 49112 0 49151 39 NextHop VxLan 0 0% 49112 0 49151 0 VFP Linecard0/0 0 0% 1024 0 1024 0 VFP Slice-0 Linecard0/0 0 0% 256 0 256 0 VFP Slice-1 Linecard0/0 0 0% 256 0 256 0 VFP Slice-2 Linecard0/0 0 0% 256 0 256 0 VFP Slice-3 Linecard0/0 0 0% 256 0 256 0 Access Switches Routing Same as with linux hosts running frr. Open vtysh and start typing Checking system units xvzf@SW152:~$ sudo smonctl Fan1 : OK Fan2 : OK Fan3 : OK PSU1 : OK PSU2 : BAD Temp1 (Temp Sensor close to Networking ASIC ): OK Temp2 (Front Right Corner Ambient Temp Sensor): OK Temp3 (System Rear Outlet Temp Sensor ): OK Temp4 (P2020 Temp Sensor ): OK Temp5 (Front Left Corner Ambient Temp Sensor ): OK More details: xvzf@SW152:~$ sudo smonctl -v -s Fan1 Fan1: OK fan:8402 RPM (max = 29000 RPM, min = 2500 RPM, limit_variance = 15%)","title":"Debugging"},{"location":"network_debugging/#helpful-toolscommands","text":"","title":"Helpful tools/commands"},{"location":"network_debugging/#frr","text":"NOTE The CLI is similar to Quagga. We are using frrouting as a routing daemon on linux systems (more specific, advertising internal subnets via BGP). Frr is also configuring IP addresses of the interfaces. Privileged users can enter the configuration shell (similar to cisco) with: sudo vtysh","title":"FRR"},{"location":"network_debugging/#viewing-installed-routes-with-vtysh","text":"NOTE ip can be replaced with ipv6 All installed routes heaven0# show ip route Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, D - SHARP, F - PBR, > - selected route, * - FIB route K>* 0.0.0.0/0 [0/0] via 172.16.0.1, eno1, 00:23:06 C>* 10.51.1.0/30 is directly connected, enp8s0f1, 00:23:17 S>* 10.52.1.2/32 [1/0] via 10.51.1.1, enp8s0f1, 00:23:17 C>* 10.64.50.1/32 is directly connected, lo, 00:23:17 B>* 10.64.66.6/32 [20/0] via 10.51.1.1, enp8s0f1, 00:23:16 B>* 10.64.66.7/32 [20/0] via 10.151.1.1, enp8s0f0, 00:23:16 B>* 10.64.70.1/32 [20/0] via 10.51.1.1, enp8s0f1, 00:22:03 * via 10.151.1.1, enp8s0f0, 00:22:03 C>* 10.151.1.0/30 is directly connected, enp8s0f0, 00:23:17 S>* 10.152.1.2/32 [1/0] via 10.151.1.1, enp8s0f0, 00:23:17 C>* 172.16.0.0/24 is directly connected, eno1, 00:23:06 B>* 192.168.1.0/24 [20/0] via 10.51.1.1, enp8s0f1, 00:22:03 * via 10.151.1.1, enp8s0f0, 00:22:03 BGP routes (note the Path, this is very useful to trace packets) heaven0# show ip bgp BGP table version is 17, local router ID is 10.64.50.1, vrf id 0 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 0.0.0.0 0 32768 i *> 10.64.50.1/32 0.0.0.0 0 32768 i *> 10.64.66.6/32 10.51.1.1 0 64666 i * 10.151.1.1 0 64667 64666 i *> 10.64.66.7/32 10.151.1.1 0 64667 i *= 10.64.70.1/32 10.151.1.1 0 64667 64701 i *> 10.51.1.1 0 64666 64701 i *= 192.168.1.0/24 10.151.1.1 0 64667 64701 i *> 10.51.1.1 0 64666 64701 i Displayed 6 routes and 9 total paths","title":"Viewing installed routes with vtysh"},{"location":"network_debugging/#core-switches","text":"The CLI is pretty similiar though not as powerful as FRR or Quagga","title":"Core switches"},{"location":"network_debugging/#routes","text":"Installed routes: core0#show ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, DH - DHCP client installed default route, M - Martian, DP - Dynamic Policy Route Gateway of last resort: B E 0.0.0.0/0 [200/0] via 10.51.1.2, Ethernet51/1 C 10.0.1.0/30 is directly connected, Ethernet1 C 10.51.1.0/30 is directly connected, Ethernet51/1 C 10.52.1.0/30 is directly connected, Ethernet51/2 B E 10.64.50.1/32 [200/0] via 10.51.1.2, Ethernet51/1 C 10.64.66.6/32 is directly connected, Loopback1 B E 10.64.66.7/32 [200/0] via 10.0.1.2, Ethernet1 via 10.51.1.2, Ethernet51/1 via 10.52.1.2, Ethernet51/2 B E 10.64.70.1/32 [200/0] via 10.0.1.2, Ethernet1 B E 10.64.80.1/32 [200/0] via 10.52.1.2, Ethernet51/2 C 10.66.6.0/30 is directly connected, Port-Channel666 B E 192.168.1.0/24 [200/0] via 10.0.1.2, Ethernet1 B E 192.168.122.0/24 [200/0] via 10.52.1.2, Ethernet51/2 BGP routes: core0#show ip bgp BGP routing table information for VRF default Router identifier 10.66.6.1, local AS number 64666 Route status codes: s - suppressed, * - valid, > - active, # - not installed, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast Origin codes: i - IGP, e - EGP, ? - incomplete AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric LocPref Weight Path * > 0.0.0.0/0 10.51.1.2 0 100 0 65001 i * > 10.64.50.1/32 10.51.1.2 0 100 0 65001 i * > 10.64.66.6/32 - 0 0 - i * >Ec 10.64.66.7/32 10.51.1.2 0 100 0 65001 64667 i * ec 10.64.66.7/32 10.0.1.2 0 100 0 64701 64667 i * ec 10.64.66.7/32 10.52.1.2 0 100 0 64801 64667 i * > 10.64.70.1/32 10.0.1.2 0 100 0 64701 i * > 10.64.80.1/32 10.52.1.2 0 100 0 64801 i * > 192.168.1.0/24 10.0.1.2 0 100 0 64701 i * > 192.168.122.0/24 10.52.1.2 0 100 0 64801 i","title":"Routes"},{"location":"network_debugging/#interface-status","text":"core0#show interfaces status Port Name Status Vlan Duplex Speed Type Flags Encapsulation Et1 connected routed full 10G 10GBASE-LR Et2 notconnect routed full 10G 10GBASE-LR Et3 notconnect routed full 10G 10GBASE-LR Et4 notconnect routed full 10G 10GBASE-LR Et5 notconnect routed full 10G 10GBASE-LR Et6 notconnect routed full 10G 10GBASE-LR Et7 notconnect routed full 10G 10GBASE-LR Et8 notconnect routed full 10G Not Present Et9 disabled 1 full 10G Not Present Et10 disabled 1 full 10G Not Present ...","title":"Interface status"},{"location":"network_debugging/#temperature-fan-speed-power-usage","text":"core0#show environment all System temperature status is: Ok Alert Critical Temp Setpoint Limit Limit Sensor Description (C) (C) (C) (C) ------- ----------------------------------- ------- ----------- ------ --------- 1 Cpu temp sensor 43.1 (60) N/A 90 95 2 Cpu board temp sensor 33.0 (55) N/A 75 80 3 Back-panel temp sensor 31.5 (50) N/A 75 85 4 Board sensor 33.0 (N/A) N/A 55 70 5 Front-panel temp sensor 28.4 (N/A) N/A 65 75 6 Trident Bottom Right Outer 44.4 (N/A) N/A 100 110 7 Trident Bottom Left Outer 42.8 (N/A) N/A 100 110 8 Trident Top Left Outer 45.0 (N/A) N/A 100 110 9 Trident Top Right Outer 44.4 (N/A) N/A 100 110 10 Trident Bottom Right Inner 42.8 (N/A) N/A 100 110 11 Trident Bottom Left Inner 43.3 (N/A) N/A 100 110 12 Trident Top Left Inner 42.8 (N/A) N/A 100 110 13 Trident Top Right Inner 42.8 (N/A) N/A 100 110 PowerSupply 1: Alert Critical Temp Setpoint Limit Limit Sensor Description (C) (C) (C) (C) ------- ----------------------------------- ------- ----------- ------ --------- 1 Hotspot temperature sensor 0.0 (80) N/A 95 100 2 Inlet temperature sensor 0.0 (55) N/A 70 75 PowerSupply 2: Alert Critical Temp Setpoint Limit Limit Sensor Description (C) (C) (C) (C) ------- ----------------------------------- ------- ----------- ------ --------- 1 Hotspot temperature sensor 31.0 (80) N/A 95 100 2 Inlet temperature sensor 36.0 (55) N/A 70 75 System cooling status is: Ok Ambient temperature: 31C Fan speed override mode enabled at 30% Airflow: port-side exhaust Config Actual Speed Stable Fan Status Speed Speed Uptime Stability Uptime -------------- ------ ------ ------ ------- --------- ------- 1/1 Ok 30% 29% 0:34:40 Stable 0:33:54 2/1 Ok 30% 30% 0:34:40 Stable 0:33:54 3/1 Ok 30% 29% 0:34:40 Stable 0:33:56 4/1 Ok 30% 30% 0:34:40 Stable 0:33:56 PowerSupply1/1 Ok 30% 34% 0:34:27 Stable 0:32:04 PowerSupply2/1 Ok 30% 34% 0:34:28 Stable 0:32:05 Power Input Output Output Supply Model Capacity Current Current Power Status Uptime ------ ----------- -------- ------- ------- ------ ---------- ------- 1 PWR-500AC-R 500W 0.00A 0.00A 0.0W Power Loss Offline 2 PWR-500AC-R 500W 0.39A 6.47A 77.8W Ok 0:34:28 Total -- 500W -- -- 77.8W -- --","title":"Temperature / Fan speed / Power usage"},{"location":"network_debugging/#asic-resource-usage","text":"core0#show hardware capacity Forwarding Resources Usage Table Feature Chip Used Used Free Committed Best Case High Entries (%) Entries Entries Max Watermark Entries ------------- ------------- --------------- ------------ --------- ------------ -------------- -------------- --------- EFP Linecard0/0 0 0% 1024 0 1024 0 EFP Slice-0 Linecard0/0 0 0% 256 0 256 0 EFP Slice-1 Linecard0/0 0 0% 256 0 256 0 EFP Slice-2 Linecard0/0 0 0% 256 0 256 0 EFP Slice-3 Linecard0/0 0 0% 256 0 256 0 Host 40 0% 147415 0 147455 40 Host Multicast 0 0% 147415 0 147455 0 Host V4Hosts 22 0% 147415 0 147455 22 Host V6Hosts 18 0% 147415 0 147455 18 IFP Linecard0/0 296 7% 3800 0 4096 296 IFP Slice-0 Linecard0/0 0 0% 512 0 512 0 IFP Slice-1 Linecard0/0 0 0% 512 0 512 0 IFP Slice-10 Linecard0/0 0 0% 256 0 256 0 IFP Slice-11 Linecard0/0 0 0% 256 0 256 0 IFP Slice-2 Linecard0/0 0 0% 512 0 512 0 IFP Slice-3 Linecard0/0 0 0% 512 0 512 0 IFP Slice-4 Linecard0/0 47 18% 209 0 256 47 IFP Slice-5 Linecard0/0 47 18% 209 0 256 47 IFP Slice-6 Linecard0/0 101 39% 155 0 256 101 IFP Slice-7 Linecard0/0 101 39% 155 0 256 101 IFP Slice-8 Linecard0/0 0 0% 256 0 256 0 IFP Slice-9 Linecard0/0 0 0% 256 0 256 0 LPM 17 0% 8173 0 8190 17 LPM V4Routes 5 0% 8173 0 8190 5 LPM V6Routes 12 0% 8173 0 8190 12 LagGroup LAG 1 0% 1023 0 1024 1 LagMember LAG 9 0% 2039 0 2048 9 MAC Linecard0/0 16 0% 163824 0 163840 16 MAC L2 Linecard0/0 16 0% 163824 0 163840 16 NextHop 39 0% 49112 0 49151 39 NextHop Multicast 0 0% 49112 0 49151 0 NextHop Unicast 39 0% 49112 0 49151 39 NextHop VxLan 0 0% 49112 0 49151 0 VFP Linecard0/0 0 0% 1024 0 1024 0 VFP Slice-0 Linecard0/0 0 0% 256 0 256 0 VFP Slice-1 Linecard0/0 0 0% 256 0 256 0 VFP Slice-2 Linecard0/0 0 0% 256 0 256 0 VFP Slice-3 Linecard0/0 0 0% 256 0 256 0","title":"ASIC Resource usage"},{"location":"network_debugging/#access-switches","text":"","title":"Access Switches"},{"location":"network_debugging/#routing","text":"Same as with linux hosts running frr. Open vtysh and start typing","title":"Routing"},{"location":"network_debugging/#checking-system-units","text":"xvzf@SW152:~$ sudo smonctl Fan1 : OK Fan2 : OK Fan3 : OK PSU1 : OK PSU2 : BAD Temp1 (Temp Sensor close to Networking ASIC ): OK Temp2 (Front Right Corner Ambient Temp Sensor): OK Temp3 (System Rear Outlet Temp Sensor ): OK Temp4 (P2020 Temp Sensor ): OK Temp5 (Front Left Corner Ambient Temp Sensor ): OK More details: xvzf@SW152:~$ sudo smonctl -v -s Fan1 Fan1: OK fan:8402 RPM (max = 29000 RPM, min = 2500 RPM, limit_variance = 15%)","title":"Checking system units"},{"location":"network_topo/","text":"Network Topology Network connectivity heavily relies on the BGP(4) protocol. Each access switch has its own AS number (detailed information following) and peers with both core switches which also have their own AS number. Hardware overview Core layer The two core switches consists of two Arista DCS7050SX-64 which peer via an 80 Gigabit interconnect. Ideally this link never sees much traffic and if so, something is going wrong with routing or there is a physical damage on the connection between one of the core switches and one of the access switches. Highspeed access layer tbd Uplink Layer Currently there is one Uplink gateway which is \"just\" a Dell R420 (2x E5-2430v2, 64GB DDR3) NATing with nftables and forwarding IPv6 traffic. It peers with the Core layer and advertises a default route. Service Layer Servers are also integrated here. Hardware varies. Access Layer We currently have 7 access switches planned ( Penguin Computing 4804i-q ) which have a 10 Gigabit connection to each of the core switches. ECMP ( E qual C ost M ultipath R outing) is enabled which ensures the switch routes packets over both link simultaniously. The switch performs a hash algorithm on the source/destination and decides on which link to send the packet. BGP internals We are using the private 16bit AS-range for our network. Core layer Core switches are running Aristas EOS. core0 -> AS64666 core1 -> AS64667 Uplink layer The uplink gateway is running frrouting and advertises a default route. heaven0 -> AS65001 Service layer Our servers are also running frrouting and advertises their internal network via BGP. kvm0 -> AS64801 Access layer The access switches are running the (seemingly acient) quagga routing suite. access1 -> AS64701 access2 -> AS64702 access3 -> AS64703 access4 -> AS64704 access5 -> AS64705 access6 -> AS64706 access7 -> AS64707 Connecting to the switches Every switch has a unique IP which is advertised and should be available from each point in the network. It is derived from the AS number. Some examples: 64666 -> 10.64.66.6/32 64702 -> 10.64.70.2/32 65001 -> 10.65.0.1/32 Peering ATTENTION The BGP daemon on the core switches is listening only on the IPv6 address range! (more specific: fc00::/16 ) Peering is possible at the coreswitches on Port 1-16 (10 Gbit) as well as 49-52 (40 Gbit, 51 and 52 split up to 4x10G for Server connections) following this schema (IPv4, IPv6). All ASes are accepted! 10.<core-id>.<port-index>.1/30 fc00:<core-id>:<port-index>::1/126","title":"Topology"},{"location":"network_topo/#network-topology","text":"Network connectivity heavily relies on the BGP(4) protocol. Each access switch has its own AS number (detailed information following) and peers with both core switches which also have their own AS number.","title":"Network Topology"},{"location":"network_topo/#hardware-overview","text":"","title":"Hardware overview"},{"location":"network_topo/#core-layer","text":"The two core switches consists of two Arista DCS7050SX-64 which peer via an 80 Gigabit interconnect. Ideally this link never sees much traffic and if so, something is going wrong with routing or there is a physical damage on the connection between one of the core switches and one of the access switches.","title":"Core layer"},{"location":"network_topo/#highspeed-access-layer","text":"tbd","title":"Highspeed access layer"},{"location":"network_topo/#uplink-layer","text":"Currently there is one Uplink gateway which is \"just\" a Dell R420 (2x E5-2430v2, 64GB DDR3) NATing with nftables and forwarding IPv6 traffic. It peers with the Core layer and advertises a default route.","title":"Uplink Layer"},{"location":"network_topo/#service-layer","text":"Servers are also integrated here. Hardware varies.","title":"Service Layer"},{"location":"network_topo/#access-layer","text":"We currently have 7 access switches planned ( Penguin Computing 4804i-q ) which have a 10 Gigabit connection to each of the core switches. ECMP ( E qual C ost M ultipath R outing) is enabled which ensures the switch routes packets over both link simultaniously. The switch performs a hash algorithm on the source/destination and decides on which link to send the packet.","title":"Access Layer"},{"location":"network_topo/#bgp-internals","text":"We are using the private 16bit AS-range for our network.","title":"BGP internals"},{"location":"network_topo/#core-layer_1","text":"Core switches are running Aristas EOS. core0 -> AS64666 core1 -> AS64667","title":"Core layer"},{"location":"network_topo/#uplink-layer_1","text":"The uplink gateway is running frrouting and advertises a default route. heaven0 -> AS65001","title":"Uplink layer"},{"location":"network_topo/#service-layer_1","text":"Our servers are also running frrouting and advertises their internal network via BGP. kvm0 -> AS64801","title":"Service layer"},{"location":"network_topo/#access-layer_1","text":"The access switches are running the (seemingly acient) quagga routing suite. access1 -> AS64701 access2 -> AS64702 access3 -> AS64703 access4 -> AS64704 access5 -> AS64705 access6 -> AS64706 access7 -> AS64707","title":"Access layer"},{"location":"network_topo/#connecting-to-the-switches","text":"Every switch has a unique IP which is advertised and should be available from each point in the network. It is derived from the AS number. Some examples: 64666 -> 10.64.66.6/32 64702 -> 10.64.70.2/32 65001 -> 10.65.0.1/32","title":"Connecting to the switches"},{"location":"network_topo/#peering","text":"ATTENTION The BGP daemon on the core switches is listening only on the IPv6 address range! (more specific: fc00::/16 ) Peering is possible at the coreswitches on Port 1-16 (10 Gbit) as well as 49-52 (40 Gbit, 51 and 52 split up to 4x10G for Server connections) following this schema (IPv4, IPv6). All ASes are accepted! 10.<core-id>.<port-index>.1/30 fc00:<core-id>:<port-index>::1/126","title":"Peering"}]}