#!/usr/sbin/nft -f
# Ansible managed

# =====================================================
# LANARAMA nftables configuration
#
# Date: 13.08.2019
#
# Desc: - Forward IPv6 traffic, NAT IPv4 traffic
#       - Stateful connection tracking
#       - Allow SSH connectiongs to the gateway
#       - Allow new BGP connectiongs to the gateway
# =====================================================

flush ruleset


# ISP related config
#   - Interface name
#   - public IP count for NAT
#   - public IPs for NAT
define isp_if = "eno1"
# define isp_ipv4_subnet = 172.16.0.0/24
# define isp_ipv6_subnet = 2000::/3 # Note: This is wildcard just for testing!
define isp_ip_count = 3
define isp_ips = { \
        0: 172.16.0.233, \
        1: 172.16.0.234, \
        2: 172.16.0.235, \
}

# NAT just for IPv4
table ip nat {
    chain prerouting {
        type nat hook prerouting priority 0; policy accept;
    }

    chain postrouting {
        type nat hook postrouting priority 100; policy accept;

        # Note: This is pretty wildcard and might be more fine grained once the
        #       network plan is established
        #
        # We are using all publicly available IPs and map every internal IP to a public IP
        # using the jenkins hash functions of nftables
        ip saddr 192.168.0.0/16 oif $isp_if snat 172.16.0.117
        ip saddr 172.16.0.1/12 oif $isp_if snat 172.16.0.117
        ip saddr 10.0.0.1/8 oif $isp_if snat 172.16.0.117
    }
}

# ==============================================
# Pretty basic firewall rules for IPv4 and IPv6
# ==============================================
table inet filter {

    # =======================================
    # Traffic targeting the gateway/firewall
    # =======================================
    chain input {
        type filter hook input priority 0; policy accept;

        # Accept loopback
        iif lo accept

        # Allow ICMP
        ip protocol icmp accept
        # Also includes neighbour discovery. If this is blocked, connectivity *will* break!
        ip6 nexthdr icmpv6 accept

        # Allow established
        ct state established, related accept

        # Allow incoming SSH connections
        tcp dport 22 ct state new accept

        # Allow incoming BGP connection requests
        tcp dport 22 ct state new accept

        # Allow node_exporter queries - *TODO* just allow this from the monitoring node
        tcp dport 9100 ct state new accept
    }

    # ===============
    # Routed traffic
    # ===============
    chain forward {
        type filter hook forward priority 0; policy accept;

        # Allow outgoing traffic to be forwarded
        oif $isp_if accept

        # Allow established connections
        iif $isp_if ct state invalid counter drop

        # Allow established connections
        iif $isp_if ct state established, related accept

        # Drop everything not related to a client-side initialized connection
        drop
    }
}

# Just some metrics
# Note: priorities set so these chains will be executed before/after the respective chains containing logic
table ip filter {
    chain input {
        type filter hook input priority -1; policy accept;
        counter comment "ipv4_in"
    }
    chain forward {
        type filter hook forward priority 1; policy accept;
        counter comment "ipv4_forwarded"
    }
    chain output {
        type filter hook output priority 1; policy accept;
        counter comment "ipv4_out"
    }
}
table ip6 filter {
    chain input {
        type filter hook input priority -1; policy accept;
        counter comment "ipv6_in"
    }
    chain forward {
        type filter hook forward priority 1; policy accept;
        counter comment "ipv6_forwarded"
    }
    chain output {
        type filter hook output priority 1; policy accept;
        counter comment "ipv6_out"
    }
}
