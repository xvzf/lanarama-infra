#!/usr/sbin/nft -f
# Ansible managed

# =====================================================
# LANARAMA nftables configuration
#
# Date: 13.08.2019
#
# Desc: - Forward IPv6 traffic, NAT IPv4 traffic
#       - Stateful connection tracking
#       - Allow SSH connectiongs to the gateway
#       - Allow new BGP connectiongs to the gateway
# =====================================================

flush ruleset


# ISP related config
#   - Interface name
#   - public IP count for NAT
#   - public IPs for NAT
define isp_if = "enp65s0f0"

# NAT just for IPv4
table ip nat {
    chain prerouting {
        type nat hook prerouting priority 0; policy accept;
        # ========== CS:GO Server redirect ==========
        iif $isp_if ip daddr 185.7.211.34 tcp dport {27015, 27020, 27025} dnat 192.168.1.21;
        iif $isp_if ip daddr 185.7.211.34 udp dport {27015, 27020, 27025} dnat 192.168.1.21;
        iif $isp_if ip daddr 185.7.211.35 tcp dport {27015, 27020, 27025} dnat 192.168.1.22;
        iif $isp_if ip daddr 185.7.211.35 udp dport {27015, 27020, 27025} dnat 192.168.1.22;
        iif $isp_if ip daddr 185.7.211.36 tcp dport {27015, 27020, 27025} dnat 192.168.1.23;
        iif $isp_if ip daddr 185.7.211.36 udp dport {27015, 27020, 27025} dnat 192.168.1.23;
        iif $isp_if ip daddr 185.7.211.37 tcp dport {27015, 27020, 27025} dnat 192.168.1.24;
        iif $isp_if ip daddr 185.7.211.37 udp dport {27015, 27020, 27025} dnat 192.168.1.24;
    }

    chain postrouting {
        type nat hook postrouting priority 100; policy accept;

        # Note: This is pretty wildcard and might be more fine grained once the
        #       network plan is established
        #
        # We are using all publicly available IPs and map every internal IP to a public IP
        # using the jenkins hash functions of nftables

    # ========== IPv4 internet NAT ==============
	ip saddr 10.0.0.0/16 oif $isp_if snat 185.7.211.34;

    # 1.21-24; 27015 TCP + UDP, 27020 TCP + UDP, 27025 TCP + UDP
	ip saddr 192.168.0.0/16 oif $isp_if snat jhash ip saddr mod 29 map { \
			0 : 185.7.211.34, \
			1 : 185.7.211.35, \
			2 : 185.7.211.36, \
			3 : 185.7.211.37, \
			4 : 185.7.211.38, \
			5 : 185.7.211.39, \
			6 : 185.7.211.40, \
			7 : 185.7.211.41, \
			8 : 185.7.211.42, \
			9 : 185.7.211.43, \
			10 : 185.7.211.44, \
			11 : 185.7.211.45, \
			12 : 185.7.211.46, \
			13 : 185.7.211.47, \
			14 : 185.7.211.48, \
			15 : 185.7.211.49, \
			16 : 185.7.211.50, \
			17 : 185.7.211.51, \
			18 : 185.7.211.52, \
			19 : 185.7.211.53, \
			20 : 185.7.211.54, \
			21 : 185.7.211.55, \
			22 : 185.7.211.56, \
			23 : 185.7.211.57, \
			24 : 185.7.211.58, \
			25 : 185.7.211.59, \
			26 : 185.7.211.60, \
			27 : 185.7.211.61, \
			28 : 185.7.211.62 }
	    };
}

# ==============================================
# Pretty basic firewall rules for IPv4 and IPv6
# ==============================================
table inet filter {

    # =======================================
    # Traffic targeting the gateway/firewall
    # =======================================
    chain input {
        type filter hook input priority 0; policy accept;

        # Accept loopback
        iif lo accept

        # Allow ICMP
        ip protocol icmp accept
        # Also includes neighbour discovery. If this is blocked, connectivity *will* break!
        ip6 nexthdr icmpv6 accept

        # Allow established
        ct state established, related accept

        # Allow incoming SSH connections
        tcp dport 22 ct state new accept

        # Allow incoming BGP connection requests
        tcp dport 22 ct state new accept

        # Allow node_exporter queries - *TODO* just allow this from the monitoring node
        tcp dport 9100 ct state new accept
    }

    # ===============
    # Routed traffic
    # ===============
    chain forward {
        type filter hook forward priority 0; policy accept;

        # Allow outgoing traffic to be forwarded
        oif $isp_if accept

        # Allow established connections
        iif $isp_if ct state invalid counter drop

        # Allow established connections
        iif $isp_if ct state established, related accept

        # Drop everything not related to a client-side initialized connection
        drop
    }
}

# Just some metrics
# Note: priorities set so these chains will be executed before/after the respective chains containing logic
table ip filter {
    chain input {
        type filter hook input priority -1; policy accept;
        counter comment "ipv4_in"
    }
    chain forward {
        type filter hook forward priority 1; policy accept;
        counter comment "ipv4_forwarded"
    }
    chain output {
        type filter hook output priority 1; policy accept;
        counter comment "ipv4_out"
    }
}
table ip6 filter {
    chain input {
        type filter hook input priority -1; policy accept;
        counter comment "ipv6_in"
    }
    chain forward {
        type filter hook forward priority 1; policy accept;
        counter comment "ipv6_forwarded"
    }
    chain output {
        type filter hook output priority 1; policy accept;
        counter comment "ipv6_out"
    }
}